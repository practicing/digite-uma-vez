{"version":3,"sources":["1.initApp.js","2.datepicker.js","3.autocomplete.js","airport.js"],"names":["autocompleteModule","angular","module","datepickerModule","aiportModule","app","controller","$scope","origDate","Date","getFullYear","getMonth","getDate","destDate","autocompleteCtrl","$timeout","$q","$log","message","airportService","querySearch","query","deferred","results","self","states","filter","createFilterFor","simulateQuery","defer","resolve","Math","random","promise","searchTextChange","text","info","selectedItemChange","item","JSON","stringify","loadAll","airportData","allStates","get","then","res","status","data","console","log","split","map","state","value","toLowerCase","display","lowercaseQuery","lowercase","indexOf","this","service","$http","url","obj"],"mappings":"AAEA,YAEA,IAAAA,oBAAAC,QAAAC,OAAA,sBAAA,aAAA,iBACAC,iBAAAF,QAAAC,OAAA,oBAAA,eACAE,aAAAH,QAAAC,OAAA,mBACAG,IAAAJ,QAAAC,OAAA,UAAA,qBAAA,oBCHAC,kBAAAG,WAAA,wBAAA,SAAA,SAAAC,GACAA,EAAAC,SAAA,GAAAC,MACAF,EAAAC,SAAA,GAAAC,MACAF,EAAAC,SAAAE,cACAH,EAAAC,SAAAG,WACAJ,EAAAC,SAAAI,WACAL,EAAAM,SAAA,GAAAJ,MACAF,EAAAC,SAAAE,cACAH,EAAAC,SAAAG,WACAJ,EAAAC,SAAAI,UAAA,MCTA,WAMA,QAAAE,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAeA,QAAAC,GAAAC,GACA,GACAC,GADAC,EAAAF,EAAAG,EAAAC,OAAAC,OAAAC,EAAAN,IAAAG,EAAAC,MAEA,OAAAD,GAAAI,eACAN,EAAAN,EAAAa,QACAd,EAAA,WACAO,EAAAQ,QAAAP,IACA,IAAAQ,KAAAC,UAAA,GACAV,EAAAW,SAEAV,EAGA,QAAAW,GAAAC,GACAlB,EAAAmB,KAAA,mBAAAD,GAEA,QAAAE,GAAAC,GACArB,EAAAmB,KAAA,mBAAAG,KAAAC,UAAAF,IAKA,QAAAG,KACA,GACAC,GADAC,EAAA,yBAYA,OATAxB,GAAAyB,MAAAC,KAAA,SAAAC,GACA,MAAAA,EAAAC,SACAL,EAAAI,EAAAE,KAEAC,QAAAC,IAAAR,MAKAC,EAAAQ,MAAA,QAAAC,IAAA,SAAAC,GACA,OACAC,MAAAD,EAAAE,cACAC,QAAAH,KAOA,QAAA1B,GAAAN,GACA,GAAAoC,GAAAxD,QAAAyD,UAAArC,EACA,OAAA,UAAAgC,GACA,MAAA,KAAAA,EAAAC,MAAAK,QAAAF,IA9DA,GAAAjC,GAAAoC,IACApC,GAAAI,eAAA,EAEAJ,EAAAC,OAAAgB,IACAjB,EAAAJ,YAAAA,EACAI,EAAAa,mBAAAA,EACAb,EAAAU,iBAAAA,EAXAlC,mBACAsD,MAAA,UAAA,gBACAhD,WAAA,0BAAA,WAAA,KAAA,OAAA,UAAA,iBAAAQ,OCJAV,aAAAyD,QAAA,kBAAA,QAAA,SAAAC,GAEA,GAAAC,GAAA,qBACAC,IAQA,OANAA,GAAApB,IAAA,WACA,MAAAkB,GAAAlB,IAAAmB,GAAAlB,KAAA,SAAAtB,GACA,MAAAA,MAIAyC","file":"digite-uma-vez.min.js","sourcesContent":["/* eslint no-unused-vars: 0 */\n\n'use strict';\n\nvar autocompleteModule = angular.module('autocompleteModule', ['ngMaterial', 'aiportModule']);\nvar datepickerModule = angular.module('datepickerModule', ['ngMaterial']);\nvar aiportModule = angular.module('aiportModule', []);\nvar app = angular.module('duvApp', ['autocompleteModule', 'datepickerModule']);\n","/* global datepickerModule */\n\n'use strict';\n\ndatepickerModule.controller('datepickerController', ['$scope', function ($scope) {\n  $scope.origDate = new Date();\n  $scope.origDate = new Date(\n    $scope.origDate.getFullYear(),\n    $scope.origDate.getMonth(),\n    $scope.origDate.getDate());\n  $scope.destDate = new Date(\n    $scope.origDate.getFullYear(),\n    $scope.origDate.getMonth(),\n    $scope.origDate.getDate() + 1);\n}]);\n","/* global autocompleteModule */\n\n'use strict';\n\n(function () {\n\n  autocompleteModule\n    .value('message', 'Hello world!')\n    .controller('autocompleteController', ['$timeout', '$q', '$log', 'message', 'airportService', autocompleteCtrl]);\n\n  function autocompleteCtrl ($timeout, $q, $log, message, airportService) {\n    var self = this;\n    self.simulateQuery = false;\n    // list of `state` value/display objects\n    self.states        = loadAll();\n    self.querySearch   = querySearch;\n    self.selectedItemChange = selectedItemChange;\n    self.searchTextChange   = searchTextChange;\n    // ******************************\n    // Internal methods\n    // ******************************\n    /**\n     * Search for states... use $timeout to simulate\n     * remote dataservice call.\n     */\n    function querySearch (query) {\n      var results = query ? self.states.filter( createFilterFor(query) ) : self.states,\n        deferred;\n      if (self.simulateQuery) {\n        deferred = $q.defer();\n        $timeout(function () {\n          deferred.resolve(results);\n        }, Math.random() * 1000, false);\n        return deferred.promise;\n      } else {\n        return results;\n      }\n    }\n    function searchTextChange (text) {\n      $log.info('Text changed to ' + text);\n    }\n    function selectedItemChange (item) {\n      $log.info('Item changed to ' + JSON.stringify(item));\n    }\n    /**\n     * Build `states` list of key/value pairs\n     */\n    function loadAll () {\n      var allStates = 'NYC, VCP, SAO, YVR, YYZ';\n      var airportData;\n\n      airportService.get().then(function (res) {\n        if (res.status === 200) {\n          airportData = res.data;\n\n          console.log(airportData);\n        }\n      });\n\n      // console.log(airportData);\n      return allStates.split(/, +/g).map( function (state) {\n        return {\n          value: state.toLowerCase(),\n          display: state\n        };\n      });\n    }\n    /**\n     * Create filter function for a query string\n     */\n    function createFilterFor (query) {\n      var lowercaseQuery = angular.lowercase(query);\n      return function filterFn (state) {\n        return (state.value.indexOf(lowercaseQuery) === 0);\n      };\n    }\n  }\n})();\n","/* global app */\n\n'use strict';\n\naiportModule.service('airportService', ['$http', function ($http) {\n\n  var url = 'data/airports.json';\n  var obj = {};\n\n  obj.get = function () {\n    return $http.get(url).then(function (results) {\n      return results;\n    });\n  };\n\n  return obj;\n  // $http.get(url)\n  //   .success(function (data, status, headers, config) {\n  //     return data;\n  //   })\n  //   .error(function (data, status, headers, config) {\n  //     // log error\n  //   });\n}]);\n\n\n// angular.module(\"services\", [])\n//   .factory(\"square\", [\"factor\", function (factor) {\n//     return factor * factor;\n//   }]);\n"],"sourceRoot":"/source/"}